Synopsis

#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>

int msgsnd(int msqid, 
		   const void *msgp, 
           size_t msgsz, 
           int msgflg);

ssize_t msgrcv(int msqid, 
               void *msgp, 
               size_t msgsz, 
               long msgtyp,
               int msgflg);



The structures
===============
The msqid_ds data structure is defined in <sys/msg.h> as follows:

    struct msqid_ds {
        struct ipc_perm msg_perm;     /* Ownership and permissions */
        time_t          msg_stime;    /* Time of last msgsnd(2) */
        time_t          msg_rtime;    /* Time of last msgrcv(2) */
        time_t          msg_ctime;    /* Time of last change */
        unsigned long   __msg_cbytes; /* Current number of bytes in
                                         queue (nonstandard) */
        msgqnum_t       msg_qnum;     /* Current number of messages
                                         in queue */
        msglen_t        msg_qbytes;   /* Maximum number of bytes
                                         allowed in queue */
        pid_t           msg_lspid;    /* PID of last msgsnd(2) */
        pid_t           msg_lrpid;    /* PID of last msgrcv(2) */
    };

The ipc_perm structure is defined in <sys/ipc.h> as follows 
(the highlighted fields are settable using IPC_SET):

    struct ipc_perm {
        key_t          __key;       /* Key supplied to msgget(2) */
        uid_t          uid;         /* Effective UID of owner */
        gid_t          gid;         /* Effective GID of owner */
        uid_t          cuid;        /* Effective UID of creator */
        gid_t          cgid;        /* Effective GID of creator */
        unsigned short mode;        /* Permissions */
        unsigned short __seq;       /* Sequence number */
    };



	IPC_STAT
    Copy information from the kernel data structure associated 
with msqid into the msqid_ds structure pointed to by buf.  
The caller must have read permission on the message queue.

 IPC_SET
=========
Write the values of some members of the msqid_ds structure 
pointed to by buf to the kernel data structure associated 
with this message queue,  updating  also its  msg_ctime  member.   
The  following  members of the structure are updated: 
msg_qbytes, msg_perm.uid, msg_perm.gid, and 
(the least significant 9 bits of) msg_perm.mode.  The effective 
UID of the calling process must match the owner (msg_perm.uid) 
or creator (msg_perm.cuid) of the message queue, or  the  caller
must  be  privileged.   Appropriate  privilege 
(Linux: the CAP_IPC_RESOURCE capability) is required to raise 
the msg_qbytes value beyond the system parameter MSGMNB.

 IPC_RMID
===========
Immediately remove the message queue, awakening all waiting reader 
and writer processes (with an error return and errno set to EIDRM).  
The  calling  process must have appropriate privileges or its 
effective user ID must be either that of the creator or owner of 
the message queue.

 IPC_INFO (Linux-specific)
============================
Returns  information  about  system-wide  message queue limits and 
parameters in the structure pointed to by buf.  This structure is 
of type msginfo (thus, a cast is required), defined in <sys/msg.h> 
if the _GNU_SOURCE feature test macro is defined:

 struct msginfo {
     int msgpool; /* Size in kibibytes of buffer pool
                     used to hold message data;
                     unused within kernel */
     int msgmap;  /* Maximum number of entries in message
                     map; unused within kernel */
     int msgmax;  /* Maximum number of bytes that can be
                     written in a single message */
     int msgmnb;  /* Maximum number of bytes that can be
                     written to queue; used to initialize
                     msg_qbytes during queue creation
                     (msgget(2)) */
     int msgmni;  /* Maximum number of message queues */
     int msgssz;  /* Message segment size;
                     unused within kernel */
     int msgtql;  /* Maximum number of messages on all queues
                     in system; unused within kernel */
     unsigned short int msgseg;
                  /* Maximum number of segments;
                     unused within kernel */
 };

The msgmni, msgmax, and msgmnb settings can be changed 
via /proc files of the same name; see proc(5) for details.

MSG_INFO (Linux-specific)

Description
============

The msgsnd() and msgrcv() system calls are used,
respectively, to send messages to, and receive 
messages from, a message queue. The calling 
process must have write permission on the 
message queue in order to send a message, and 
read permission to receive a message.

The msgp argument is a pointer to caller-defined
structure of the following general form:

    struct msgbuf {
        long mtype;       /* message type, must be > 0 */
        char mtext[1];    /* message data */
    };

The mtext field is an array (or other structure) whose 
size is specified by msgsz, a nonnegative integer value. 
Messages of zero length (i.e., no mtext field) are 
permitted. The mtype field must have a strictly 
positive integer value. This value can be used by the 
receiving process for message selection (
see the description of msgrcv() below).

msgsnd()
==========
The msgsnd() system call appends a copy of the message 
pointed to by msgp to the message queue whose 
identifier is specified by msqid.

If sufficient space is available in the queue, msgsnd() 
succeeds immediately. (The queue capacity is defined 
by the msg_qbytes field in the associated data 
structure for the message queue. During queue 
creation this field is initialized to MSGMNB bytes, 
but this limit can be modified using msgctl(2).) 
If insufficient space is available in the queue, then 
the default behavior of msgsnd() is to block until 
space becomes available. If IPC_NOWAIT is specified 
in msgflg, then the call instead fails with the 
error EAGAIN.

A blocked msgsnd() call may also fail if:
* the queue is removed, in which case the system 
  call fails with errno set to EIDRM; or
* a signal is caught, in which case the system 
  call fails with errno set to EINTR;see signal(7). 
 (msgsnd() is never automatically restarted after 
 being interrupted by a signal handler, regardless 
 of the setting of the SA_RESTART flag when 
 establishing a signal handler.)
 Upon successful completion the message queue data 
 structure is updated as follows:
    msg_lspid is set to the process ID of the calling process.
    msg_qnum is incremented by 1.
    msg_stime is set to the current time. 

msgrcv()
==========
The msgrcv() system call removes a message from the 
queue specified by msqid and places it in the buffer 
pointed to by msgp.

The argument msgsz specifies the maximum size in bytes for 
the member mtext of the structure pointed to by the msgp 
argument. If the message text has length greater than msgsz, 
then the behavior depends on whether MSG_NOERROR is 
specified in msgflg. If MSG_NOERROR is specified, then the 
message text will be truncated (and the truncated part 
will be lost); if MSG_NOERROR is not specified, then the 
message isn't removed from the queue and the system 
call fails returning -1 with errno set to E2BIG.

The argument msgtyp specifies the type of message 
requested as follows:
* If msgtyp is 0, then the first message in the queue is read.
* If msgtyp is greater than 0, then the first message in the 
  queue of type msgtyp is read, unless MSG_EXCEPT was 
  specified in msgflg, in which case the first message in 
  the queue of type not equal to msgtyp will be read.
* If msgtyp is less than 0, then the first message in the 
  queue with the lowest type less than or equal to the 
  absolute value of msgtyp will be read.

The msgflg argument is a bit mask constructed by ORing 
together zero or more of the following flags:
IPC_NOWAIT
    Return immediately if no message of the requested 
	type is in the queue. The system call fails with 
	errno set to ENOMSG. 
MSG_EXCEPT
    Used with msgtyp greater than 0 to read the 
	first message in the queue with message type 
	that differs from msgtyp. 
MSG_NOERROR
    To truncate the message text if longer than msgsz bytes. 
If no message of the requested type is available and 
	IPC_NOWAIT isn't specified in msgflg, the calling 
    process is blocked until one of the following 
    conditions occurs:
* A message of the desired type is placed in the queue.
* The message queue is removed from the system. In this 
  case the system call fails with errno set to EIDRM.
* The calling process catches a signal. In this case the 
  system call fails with errno set to EINTR. (msgrcv() 
  is never automatically restarted after being interrupted by 
  a signal handler, regardless of the setting of the SA_RESTART 
  flag when establishing a signal handler.)

Upon successful completion the message queue data structure 
is updated as follows:
* msg_lrpid is set to the process ID of the calling process.
* msg_qnum is decremented by 1.
* msg_rtime is set to the current time. 

Return Value
==============
On failure both functions return -1 with errno indicating 
the error, otherwise msgsnd() returns 0 and msgrcv() returns 
the number of bytes actually copied into the mtext array.

Errors
======
When msgsnd() fails, errno will be set to one among the following values: 


Note:
=======
MSGMAX := Maximum size for a message text: 8192 bytes 
(on Linux, this limit can be read and modified via 
/proc/sys/kernel/msgmax).

MSGMNB:= Default maximum size in bytes of a message 
queue: 16384 bytes (on Linux, this limit can be read 
and modified via /proc/sys/kernel/msgmnb). The superuser 
can increase the size of a message queue beyond MSGMNB 
by a msgctl(2) system call.
The implementation has no intrinsic limits for the 
system wide maximum number of message headers (MSGTQL) 
and for the system wide maximum size in bytes of the 
message pool (MSGPOOL). 
